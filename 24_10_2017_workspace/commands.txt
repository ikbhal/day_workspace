#create the database with this command
mix ecto.create

# create migrations
mix ecto.gen.migration create_people
# create new migration file: priv/repo/migrations

# to run migrations
mix ecto.migrate


# to do the changes in the migration.
mix ecto.rollback

# Shema Elixir representation of data from out database
# Schemas are commonly associated with database table
# they can also assocated with database view.
defmodule Friends.Person do
	use Ecto.Schema

	schema "people" do
		field :first_name, :string
		field :last_name, :string
		field :age, :integer
	end

end

# above schema maps to "people" table in database
# first_name, last_name, age are table fields
# naming convention for Schema is singularize


#play with recto in iex

iex -S mix
person = %Friends.Person{}
# create new person struct, nil values for all fields
# set values as belo
person = %Friends.Person{age:28}

# or with syntax like this
%{person|age:28}

#retrieve value
person.age

# insert data
person = %Friends.Person{}
Friends.repo.insert(person)

#database corresponds to Friends.repo

# Validating changes
def changeset(person, params \\ %{}) do
	person
	|> Ecto.Changeset.cast(params,[:first_name, :last_name, :age])
	|> Ecto.Changeset.validate_required([:first_name, :last_name])

# castyo changeset, anything not in the list will ignored
person = %Friends.Person{}
changeset = Friends.Person.changeset(person, {})
{:error, changeset} = Friends.Repo.insert(changeset)

:ok, :error, 
changeset.errors
[first_name:"Can't be blank", last_name:"Can't be blan"]

changeset.valid?
#=>false

# to drop the database
mix ecto.drop

# fetching a single recrod
Friends.Person |> Ecto.Query.first

require Ecto.Query
Ecto.Query.from p in Friends.Person, order_by: [asc: p.id], limit:1

Friends.Person |> Ecto.Query.first|Friends.repo.one

#to retriee last
Friends.Person |> Ecto.Query.last | Friends.repo.one

Ecto.MultipleResultsError

# Fetching all records
Friends.Person |> Friends.Repo.all

# Fetch a single record base on ID
Friends.Person |> Friends.Repo.get(1)

# Fetch a single record on a specific attribute
Friends.Person |> Friends.Repo.get_by(first_name, "Ryan")

# Filtering result
Friends.Person |> Friends.Query.where(last_name: "smith") |> Friends.Repo.all

---
Frinds.Query.from(p in Friends.Person, where: p.last_name == last_name) |> Friends.Repo.all

# pin operator ^
last_name = "Smith"
Friends.Person |> Ecto.Query.where(last_name: ^last_name)|> Friends.Repo.all

# updating the db table row
person = Friends.Person |> Ecto.Query.first |> Frineds.Repo.one

changeset = Friends.Person.changeset(person, %{age:29})

Friends.Repo.update(changeset)

# deleting records
person = Friends.Repo.get(Friends.Person,1)
Friends.Repo.delete(person)
---
https://hexdocs.pm/ecto/getting-started.html

# Alias  the module so it can be called aas Bar insted of Foo.Bar
alias Foo.Bar, as: Bar

# Require the module in order to use its macro
require Foo

# import the functions from Foo so they can be called  without 'Foo' prefix
import Foo

# invoke the custom code defined in Foo as an extension point
use Foo
---
alias Math.List

is same as:

alias Math.List, as: List

alias
lexcally scopped
---
meta programming
  writing code that  generates code

macros are defined at compile time
iex>require Integer
iex>Integer.is_odd(3)
---
alias, require are lexicallyscoped
---
we use import whenever we want to easily access functions or macros
from other modules wihtout using the fully-qualifed  name.

import duplicate/2 function from  the List module sereral times

import List, only: [duplicate:2]
>duplicate

#import all macros
import Integer, only: :macro

#import all functions
import Integer, only: :functions

alias, require, import lexically scoped
---
defmodule Example do
  use Feature, option: :value
end
is compiled into

defmodule Example do
  require Feature
  Feature.__using__(option: :value)
end
---
defmodule Foo do
  defmodule Bar do
  end
end
---
 For example, imagine you have an application where all modules are nested under MyApp, you can alias the modules MyApp.Foo, MyApp.Bar and MyApp.Baz at once as follows:

alias MyApp.{Foo, Bar, Baz}
---
module attribute
@moduledoc
@doc
@behaviour
@before_compile

---
defmodule Math do
	@moduledoc """

	Provides math-related functions

	## Examples
	iex>Math.sum(1,2)
	3
  """

  @doc """
  Calculates the sume of two numbers.
  """
  def sum(a,b), do: a + b

 end

 heredocs


 elixirc math.ex
 iex
 iex>h Math # Access the docs for moduel Math
 ...
 iex>h Math.sum # Access the docs for sum function
 ---
 IO.inspect @initial_state
 ---
 defmodule Car do
 	@enforce_keys [:make]
 	defstruct [:model, :make]
 ---
 map = %{a:1, b:2}
 map[:a]
 1
 %{map|a:3}
 %{a:3, b:2}
 ---
 structs are extensions built on top of maps
 that provide compile-time checks and
 default values

defining struct
---
defmodule User do
	defstruct name: "John", age: 27
end
# defstruct defined what fields the struct
# will have along with  their defautl value
---
creating struct var
%User{}
%User{age:27, name:"Meg"}

---
meta programming
Quote, unquote
macros
domain specific language
---
building block of an elixir program
is tuple with 3 elements
ex:sum(1,2,3)
{:sum, [], 1,2,3}

You can get the representation of any expression
by using the quote macro:
iex>quote do: sum(1,2,3)
{:sum, [], [1,2,3]}
first element : function name
second: keyword list containing meta data
third is the argument list
---
iex>quote do: 1 + 2
{:+, [context: Elixir, import: kernel], [1,2]}

iex>quote do: %{1 => 2}
{:%{}, [], [{1,2}]}

iex> quote do: x
{:x , [], Elixir}
last element is atom

AST(Abstract Syntax Tree)
quoted expressiion
---

