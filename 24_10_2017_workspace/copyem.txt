1)lets recreate new app called todoapp
mix phx.new todoapp

mix phx.server
http://localhost:4000
mix ecto.gen.migration add_todo_table
mix ecto.migrate
iex -s mix
person = %Friends.Person{}
Friends.Repo.
 person

---
reference
----
mix ecto.gen.migration create_people
priv/repo/migrations
defmodule Friends.Repo.Migrations.CreatePeople do
  use Ecto.Migration

  def change do
    create table(:people) do
      add :first_name, :string
      add :last_name, :string
      add :age, :integer
    end
  end
end
---
lib/friends/person.ex
defmodule Friends.Person do
  use Ecto.Schema

  schema "people" do
    field :first_name, :string
    field :last_name, :string
    field :age, :integer
  end
end

---
Friends.Person module inside lib/friends/person.ex now:

def changeset(person, params \\ %{}) do
  person
  |> cast(params, ~w(first_name last_name age))
  |> validate_required([:first_name, :last_name])
end

---
{ :error, changeset } = Friends.Repo.insert changeset

person = %Friends.Person{}
changeset = Friends.Person.changeset(person, %{first_name: "Ryan", last_name: "Bigg"})
changeset.valid?

case Friends.Repo.insert(changeset) do
  { :ok, person } ->
    # do something with person
  { :error, changeset } ->
    # do something with changeset
end
---
case Friends.Repo.insert(changeset) do
  { :ok, person } ->
    # do something with person
  { :error, changeset } ->
    # do something with changeset
end

---
Friends.Person |> Ecto.Query.first
---
require Ecto.Query
Ecto.Query.from p in Friends.Person, order_by: [asc: p.id], limit: 1
---
Friends.Person |> Ecto.Query.first |> Friends.Repo.one
--
Friends.Person |> Ecto.Query.last |> Friends.Repo.one
---
Friends.Person |> Friends.Repo.all
---
Friends.Person |> Friends.Repo.get(1)
---
Friends.Person |> Friends.Repo.get_by(first_name: "Ryan")
---
Friends.Person |> Ecto.Query.where(last_name: "Smith") |> Friends.Repo.all
---
Updating records
person = Friends.Person |> Ecto.Query.first |> Friends.Repo.one
changeset = Friends.Person.changeset(person, %{age: 29})
Friends.Repo.update(changeset)
case Friends.Repo.update(changeset) do
  {:ok, person} ->
    # do something with person
  {:error, changeset}
    # do something with changeset
end
---
Deleteing records
person = Friends.Repo.get(Friends.Person, 1)
Friends.Repo.delete(person)
---
many_to_many :tags, MyApp.Tag, join_through: "posts_tags"
 has_one :category, {"posts_categories", Category}
---
lets try create schema and mgirations
---
Bootstrap reference
https://www.w3schools.com/bootstrap/bootstrap_forms.asp

